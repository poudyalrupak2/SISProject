@model SISProject.Models.student

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="panel-group">
    <div class="panel panel-primary">
        <div class="panel-heading">Edit Student</div>
        <div class="panel-body">

            @using (Html.BeginForm("Edit", "Students", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {

                @Html.AntiForgeryToken()

            <div class="form-horizontal">

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.Id)
                @Html.HiddenFor(Model => Model.photopath)
                @Html.HiddenFor(Model => Model.Email)



                <div class="form-group">
                    @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", minlength = "3", maxlength = "50", onkeypress = "return lettersOnly(event)" } })

                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.MiddleName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.MiddleName, new { htmlAttributes = new { @class = "form-control", maxlength = "50", onkeypress = "return lettersOnly(event)" } })
                        @Html.ValidationMessageFor(model => model.MiddleName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", minlength = "3", maxlength = "50", onkeypress = "return lettersOnly(event)" } })

                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.EnrollDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.EnrollDate, new { htmlAttributes = new { @class = "form-control", type = "date" } })
                        @Html.ValidationMessageFor(model => model.EnrollDate, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-md-2">Semister</label>
                    <div class="col-md-10">
                        @Html.DropDownListFor(m => m.SemisterId, new SelectList(ViewBag.SemId, "value", "Text"), "select semister", new { @class = "Form-control" })


                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.RollNo, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.RollNo, new { htmlAttributes = new { @class = "form-control", min = "1" } })
                        @Html.ValidationMessageFor(model => model.RollNo, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        male: @Html.RadioButtonFor(m => m.Gender, "Male")
                        female: @Html.RadioButtonFor(m => m.Gender, "Female")
                        @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.photo, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @if (Model.photopath != null)
                        {
                            <img src="@Url.Content(Model.photopath)" style="margin:10px" height="200" width="200" id="imagePreview" />
                        }
                        else
                        {
                            <img src="\StuPhoto\noimg.png" style="margin:10px" height="200" width="200" id="imagePreview" />
                        }


                        <input type="file" name="photo" accept="image/jpeg, image/png" onchange="ShowImagePreview(this,document.getElementById('imagePreview'))" />
                        @Html.ValidationMessageFor(model => model.photo, "", new { @class = "text-danger" })
                    </div>
                </div>



                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Edit" class="btn btn-primary" />
                        @Html.ActionLink("Back to Index", "Index", null, new { @class = "btn btn-primary" })

                    </div>
                </div>

            </div>
            }
        </div>
    </div>
</div>
<script type="text/javascript">
    function lettersOnly() {
        var charCode = event.keyCode;

        if ((charCode > 64 && charCode < 91) || (charCode > 96 && charCode < 123) || charCode == 8)

            return true;
        else
            return false;
    }
    function ShowImagePreview(imageUploader, previewImage) {
        if (imageUploader.files && imageUploader.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                $(previewImage).attr('src', e.target.result);
            }
            reader.readAsDataURL(imageUploader.files[0]);
        }
    }

</script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
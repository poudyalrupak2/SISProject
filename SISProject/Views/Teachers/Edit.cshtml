@model SISProject.Models.Teacher

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .validate {
        color: #FF0000;
    }
</style>
<h2>Edit</h2>

<div class="panel-group">
    <div class="panel panel-primary">
        <div class="panel-heading">Create Teacher</div>
        <div class="panel-body">


            @using (Html.BeginForm("Edit", "Teachers", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()

            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.Id)
                @Html.HiddenFor(Model => Model.photopath)
                @Html.HiddenFor(Model => Model.Email)


                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", onkeypress = "return lettersOnly(event)" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        male: @Html.RadioButtonFor(m => m.Gender, "Male")
                        female: @Html.RadioButtonFor(m => m.Gender, "Female")
                        @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.PhoneNo, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.PhoneNo, new { htmlAttributes = new { @class = "form-control", onkeyup = "return numberonly(event)", id = "phone" } })
                        <span class="validate" id="error"></span>
                        @Html.ValidationMessageFor(model => model.PhoneNo, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.HireDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.HireDate, new { htmlAttributes = new { @class = "form-control", @type = "date" } })
                        @Html.ValidationMessageFor(model => model.HireDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.photo, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @if (Model.photopath != null)
                        {
                            <img src="@Url.Content(Model.photopath)" style="margin:10px" height="200" width="200" id="imagePreview" />
                        }
                        else
                        {
                            <img src="\StuPhoto\noimg.png" style="margin:10px" height="200" width="200" id="imagePreview" />
                        }

                        <input type="file" name="photo" accept="image/jpeg, image/png" onchange="ShowImagePreview(this,document.getElementById('imagePreview'))" />
                        @Html.ValidationMessageFor(model => model.photo, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Edit" class="btn btn-primary" />
                        @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary" })

                    </div>
                </div>
            </div>
            }
            

            <div>
                @Html.ActionLink("Back to List", "Index")
            </div>
            </div>
        </div>
    </div>
<script type="text/javascript">
    function lettersOnly() {
        var charCode = event.keyCode;

        if ((charCode > 64 && charCode < 91) || (charCode > 96 && charCode < 123) || charCode == 8 || charCode == 32)

            return true;
        else
            return false;
    }
    function numberonly() {
        var num = document.getElementById("phone").value;
        var patt = new RegExp(/^\d{10}$/);

        var res = patt.test(num);
        if (res) {
            document.getElementById("error").innerHTML = "";
            return true;

        }
        else {
            document.getElementById("error").innerHTML = "Enter Valid phone number";
            return false;
        }


    }
                function ShowImagePreview(imageUploader, previewImage) {
                    if (imageUploader.files && imageUploader.files[0]) {
                        var reader = new FileReader();
                        reader.onload = function (e) {
                            $(previewImage).attr('src', e.target.result);
                        }
                        reader.readAsDataURL(imageUploader.files[0]);
                    }
                }

</script>

            @section Scripts {
                @Scripts.Render("~/bundles/jqueryval")
            }
